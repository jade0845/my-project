SVG Drawing Tool:

HTML BREAK-DOWN:

1. Document Setup:
- <!DOCTYPE html> and <html lang="en"> define the document as HTML5.
- <meta charset="UTF-8" /> ensures proper character encoding.
- <meta name="viewport" content="width=device-width, initial-scale=1.0" /> ensures responsive design on different screen sizes.
- <title> specifies the page title as “SVG Drawing Tool.”
- <link rel="stylesheet" href="style.css" /> links an external CSS file for styling.

2. Main Container (.frame):
- Holds the entire drawing interface.
- Includes the main heading <h1>SVG Drawing Tool</h1>.

3.1. Feature: Tool Selection
Requirement: Users must be able to select a drawing tool (Pen, Line, Rectangle) to draw on the canvas.
Valid Cases:
- Pen tool selected → User can draw freehand lines.
- Line tool selected → User can draw straight lines.
- Rectangle tool selected → User can draw rectangles.
- Keyboard shortcuts (P, L, R) switch tools correctly.
- Active tool visually highlighted.
Invalid Cases:
- Tool not selected → No drawing possible.
- Invalid keyboard key pressed → Tool does not switch.
- Multiple tools active simultaneously → UI should prevent it.

2. Feature: Stroke Settings
Requirement: Users can change stroke color and width.
Valid Cases:
- Color picker selects a valid hex color → Stroke color updates correctly.
- Width input within range (1–20) → Stroke thickness updates correctly.
Invalid Cases:
- Width input below 1 or above 20 → Should either restrict input or ignore invalid values.
- Color input invalid (manually typed invalid value) → Defaults to previous valid color.

3. Feature: Drawing Actions
Requirement: Drawing on the canvas works according to selected tool and stroke settings.
Valid Cases:
- Click and drag → Draws according to selected tool.
- Changing stroke settings → New shapes respect updated color/width.
- Undo → Reverts last action.
- Clear → Removes all drawings from canvas.
Invalid Cases:
- Drawing without selecting a tool → Nothing happens.
- Undo with no previous actions → No errors, does nothing.
- Clear on empty canvas → No errors, does nothing.

4. Feature: Download SVG
Requirement: Users can download their drawing as an SVG file.
Valid Cases:
- Clicking “Download SVG” → Correct SVG file is generated and downloaded.
- File contains all drawn elements with correct stroke settings.
Invalid Cases:
- Download button clicked before any drawing → Generates empty SVG file.
- Browser blocking downloads → File not saved (handled by browser permissions).

5. Feature: UI and Responsiveness
Requirement: UI elements (buttons, inputs, canvas) must be visible and usable.
Valid Cases:
- Toolbar visible and usable on all screen sizes.
- Canvas responds to mouse events correctly.
- Hint text visible for guidance.
Invalid Cases:
- Toolbar hidden or overlapping → Buttons not clickable.
- Canvas does not capture mouse events → Drawing fails.

CSS BREAK-DOWN:

1. Root Variables (:root): Defines color variables used throughout the tool:
Properties and effecte:
- --bg → canvas background color.
- --ink → primary accent color for active buttons.
- --ink-dark → darker shade for borders/active buttons.
- --border → general border color.
- --ui → default text/UI color.

2. Global Styles (* and body):
- box-sizing: border-box ensures padding and borders are included in element width/height.
- Sets default font, colors, background, and page padding.

3. Frame Container (.frame and h1):
- .frame wraps the entire tool with border, padding, and rounded corners.
- <h1> heading styled with large font size and margin for prominence.

4. Toolbar (.toolbar and .toolbar .group):
- .toolbar uses flexbox to arrange buttons and inputs horizontally with gaps.
- .group groups related controls with padding, border, background, and rounded corners.
- Buttons, number inputs, and selects have consistent border, padding, cursor, and background.
- .active class highlights the selected tool with blue background, white text, and darker border.
- Labels styled for small, readable text.

5. Canvas Area (.canvas-wrap and svg):
- .canvas-wrap provides a bordered container with background and fixed height.
- Rounded corners improve visual appearance.
- svg fills the container completely and disables default touch actions for smooth drawing interactions.

JAVASCRIPT Breakdown:

1. DOM Element Selection:
- board → the <svg> canvas element.
- layer → <g id="draw-layer"> where permanent drawings are stored.
- ghost → <g id="ghost-layer"> for temporary shapes (like preview lines/rectangles).
- colorEl → stroke color input.
- widthEl → stroke width input.

2. Tool Definitions and Selection:
- tools object defines three tools: PEN, LINE, RECT.
- toolButtons maps each tool to its corresponding button in the toolbar.
- setTool(t) function updates currentTool and visually highlights the active button.
Button Clicks:
- Each tool button calls setTool() on click to activate the tool.
Keyboard Shortcuts:
- Press P → selects Pen.
- Press L → selects Line.
- Press R → selects Rectangle.
- Press Ctrl+Z or Cmd+Z → calls undo() function (reverts last action).

3. Drawing State Management:
- drawing → boolean to track if the user is currently drawing.
- start → stores starting point of the drawing.
- el → current SVG element being drawn.
- Ensures accurate placement of drawings on the SVG canvas.

4. Drawing Actions (onDown(evt)):
- Triggered when the user presses down (mouse or touch) on the canvas.
- Sets drawing = true and clears the ghost layer.
- Stores start coordinates and current stroke color and width.
Tool-specific Drawing:
Pen Tool:
- Creates a <path> element.
- Sets fill="none" and applies stroke color, width, line cap, and line join.
- Begins path with M x y and appends to the draw layer.
Line Tool:
- Creates a <line> element.
- Sets starting (x1, y1) and ending coordinates (x2, y2 initially same as start).
- Applies stroke color and width.
- Appends to the draw layer.
Rectangle Tool:
- Creates a <rect> element with starting x and y.
- Configures stroke color and width (height/width updated while drawing).

5. Download Functionality:
- The download button (downloadSvg) is linked to a downloadSvg function to allow exporting the drawn SVG.

LEARNING OUTCOMES:
1. Structured a web interface with semantic elements and an interactive canvas.
2. Created layers in SVG for permanent and temporary drawings.
3. Applied CSS variables for consistent theme management.
4. Styled buttons, inputs, labels, and canvas for a user-friendly interface.
5. Dynamically created and manipulated SVG elements (<path>, <line>, <rect>).
6. Handled real-time updates to SVG elements during drawing actions.